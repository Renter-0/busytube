name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_name: app-linux-x86_64.tar.gz
            archive_command: tar -czf

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_name: app-linux-aarch64.tar.gz
            archive_command: tar -czf

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_name: app-windows-x86_64.zip
            archive_command: 7z a -tzip

          - os: windows-latest
            target: i686-pc-windows-msvc
            archive_name: app-windows-i686.zip
            archive_command: 7z a -tzip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install cross-compilation dependencies for aarch64 with OpenSSL
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # Install OpenSSL development libraries for aarch64
          sudo apt-get install -y libssl-dev pkg-config
          sudo apt-get install -y gcc-multilib
          sudo apt-get install -y libssl-dev:arm64
          # Create symlink to find OpenSSL properly
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'rustflags = ["-C", "link-arg=-lgcc"]' >> ~/.cargo/config

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          # For aarch64 OpenSSL configuration
          OPENSSL_DIR: /usr
          OPENSSL_INCLUDE_DIR: /usr/include
          OPENSSL_LIB_DIR: /usr/lib/aarch64-linux-gnu
          # Tell the openssl crate to use the system OpenSSL
          OPENSSL_STATIC: "1"
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_PATH: "/usr/lib/aarch64-linux-gnu/pkgconfig"
          PKG_CONFIG_SYSROOT_DIR: "/"

      - name: Set binary name
        id: binary
        shell: bash
        run: |
          PROJECT_NAME=$(grep -m1 "name" Cargo.toml | cut -d '"' -f2 | cut -d "'" -f2)
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "BIN_NAME=${PROJECT_NAME}.exe" >> $GITHUB_OUTPUT
          else
            echo "BIN_NAME=${PROJECT_NAME}" >> $GITHUB_OUTPUT
          fi
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_OUTPUT

      - name: Create archive
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ steps.binary.outputs.BIN_NAME }} release/
          cd release
          ${{ matrix.archive_command }} ../${{ matrix.archive_name }} ${{ steps.binary.outputs.BIN_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}
          if-no-files-found: error

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.archive_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
